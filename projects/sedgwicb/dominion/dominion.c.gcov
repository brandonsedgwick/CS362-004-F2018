        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      140:    8:int compare(const void* a, const void* b) {
      140:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      140:   11:  if (*(int*)a < *(int*)b)
       50:   12:    return -1;
       90:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       10:  115:		  if (numPlayers == 2){ 
        5:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       45:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       15:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       10:  140:      state->deckCount[i] = 0;
       40:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       30:  143:	  state->deck[i][j] = estate;
       30:  144:	  state->deckCount[i]++;
        -:  145:	}
       80:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       70:  148:	  state->deck[i][j] = copper;
       70:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       15:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       10:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       15:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       10:  166:      state->handCount[i] = 0;
       10:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
       10:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       10:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       10:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       10:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      120:  214:  while (state->deckCount[player] > 0) {
      100:  215:    card = floor(Random() * state->deckCount[player]);
      100:  216:    newDeck[newDeckPos] = state->deck[player][card];
      100:  217:    newDeckPos++;
      285:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      185:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      100:  221:    state->deckCount[player]--;
        -:  222:  }
      110:  223:  for (i = 0; i < newDeckPos; i++) {
      100:  224:    state->deck[player][i] = newDeck[i];
      100:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       10:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
        4:  311:int numHandCards(struct gameState *state) {
        4:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        8:  320:int supplyCount(int card, struct gameState *state) {
        8:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       18:  346:int whoseTurn(struct gameState *state) {
       18:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        2:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        2:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       37:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       37:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       37:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       37:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       37:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       37:  576:    state->deckCount[player]--;
       37:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       37:  580:  return 0;
        -:  581:}
        -:  582:
        6:  583:int getCost(int cardNumber)
        -:  584:{
        6:  585:  switch( cardNumber ) 
        -:  586:    {
        2:  587:    case curse:
        2:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
        1:  601:    case adventurer:
        1:  602:      return 6;
        1:  603:    case council_room:
        1:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
        1:  615:    case village:
        1:  616:      return 3;
        1:  617:    case baron:
        1:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*REFACTORED CARDS*/
        -:  647:
        -:  648:
        1:  649:adventurerRefactored(struct gameState *state, int currentPlayer, int *temphand)
        -:  650:{
        1:  651:	int z=0;
        -:  652:	int cardDrawn;
        1:  653:	int drawntreasure=0;
        -:  654:	
        4:  655:	     while(drawntreasure<2){
        2:  656:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  657:	  shuffle(currentPlayer, state);
        -:  658:	}
        2:  659:	drawCard(currentPlayer, state);
        2:  660:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  661:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  662:	  drawntreasure++;
        -:  663:	else{
    #####:  664:	  temphand[z]=cardDrawn;
    #####:  665:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:	  z=z+2;
        -:  667:	}
        -:  668:      }
        2:  669:      while(z-1>=0){
    #####:  670:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:	z=z-1;
        -:  672:      }
        1:  673:      return 0;
        -:  674:			
        -:  675:
        -:  676:	
        -:  677:
        -:  678:}
        -:  679:
        -:  680:
        -:  681:
        1:  682:int councilRoomRefactored(struct gameState *state, int currentPlayer, int handPos)
        -:  683:{
        -:  684:
        -:  685:      //+4 Cards
        -:  686:      int i;
        4:  687:	  for (i = 1; i < 4; i++)
        -:  688:	{
        3:  689:	  drawCard(currentPlayer, state);
        -:  690:	}
        -:  691:			
        -:  692:      //+1 Buy
        1:  693:      state->numBuys++;
        -:  694:			
        -:  695:      //Each other player draws a card
        3:  696:      for (i = 0; i < state->numPlayers; i++)
        -:  697:	{
        2:  698:	  if ( i != currentPlayer )
        -:  699:	    {
        1:  700:	      drawCard(i, state);
        -:  701:	    }
        -:  702:	}
        -:  703:			
        -:  704:      //put played card in played card pile
        1:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:			
        1:  707:      return 0;
        -:  708:
        -:  709:
        -:  710:}
        -:  711:
        -:  712:
        -:  713:
        1:  714:int feastRefactored(struct gameState *state, int currentPlayer, int *temphand, int choice1) 
        -:  715:{
        -:  716:      int i;
        -:  717:	  int x;
        -:  718:	  
        -:  719:	  //gain card with cost up to 5
        -:  720:      //Backup hand
        6:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i=i+2){
        5:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        5:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
        1:  728:      updateCoins(currentPlayer, state, 5);
        1:  729:      x = 1;//Condition to loop on
        3:  730:      while( x == 1) {//Buy one card
        1:  731:	if (supplyCount(choice1, state) <= 0){
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
        -:  738:	}
        1:  739:	else if (state->coins < getCost(choice1)){
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
        -:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
        1:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        1:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
       11:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       10:  764:	state->hand[currentPlayer][i] = temphand[i];
       10:  765:	temphand[i] = -1;
        -:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
        1:  769:      return 0;
        -:  770:	  
        -:  771:	  }
        -:  772:
        -:  773:
        -:  774:
        1:  775:int smithyRefactored(struct gameState *state, int currentPlayer, int handPos)
        -:  776:{
        -:  777:int i;
        -:  778:	  //+3 Cards
        3:  779:      for (i = 1; i < 3; i++)
        -:  780:	{
        2:  781:	  drawCard(currentPlayer, state);
        -:  782:	}
        -:  783:			
        -:  784:      //discard card from hand
        1:  785:      discardCard(handPos, currentPlayer, state, 0);
        1:  786:      return 0;
        -:  787:
        -:  788:
        -:  789:}
        -:  790:
        -:  791:
        -:  792:
        2:  793:int villageRefactored(struct gameState *state, int currentPlayer, int handPos)
        -:  794:{
        -:  795:	  //+1 Card
        2:  796:      drawCard(currentPlayer, state);
        -:  797:			
        -:  798:      //+2 Actions
        2:  799:      state->numActions = state->numActions + 2;
        -:  800:			
        -:  801:      //discard played card from hand
        2:  802:      discardCard(handPos, currentPlayer, state, 0);
        2:  803:      return 0;
        -:  804:
        -:  805:
        -:  806:
        -:  807:
        -:  808:}
        -:  809:
        -:  810:
        -:  811:
        4:  812:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  813:{
        -:  814:  int i;
        -:  815:  int j;
        -:  816:  int k;
        -:  817:  int x;
        -:  818:  int index;
        4:  819:  int currentPlayer = whoseTurn(state);
        4:  820:  int nextPlayer = currentPlayer + 1;
        -:  821:
        4:  822:  int tributeRevealedCards[2] = {-1, -1};
        -:  823:  int temphand[MAX_HAND];// moved above the if statement
        4:  824:  int drawntreasure=0;
        -:  825:  int cardDrawn;
        4:  826:  int z = 0;// this is the counter for the temp hand
        4:  827:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  828:    nextPlayer = 0;
        -:  829:  }
        -:  830:  
        -:  831:	
        -:  832:  //uses switch to select card and perform actions
        4:  833:  switch( card ) 
        -:  834:    {
        1:  835:    case adventurer:
        -:  836:	//begin refactoring here
        1:  837:	adventurerRefactored(state, currentPlayer, temphand);
        -:  838:	
        -:  839:	
        -:  840:	
        1:  841:	 case council_room:
        -:  842:	 //refactored
        1:  843:	   councilRoomRefactored(state, currentPlayer, handPos);
        -:  844:	
        -:  845: 
        -:  846:			
        1:  847:    case feast:
        1:  848:	  feastRefactored(state, currentPlayer, temphand, choice1);
        -:  849:			
        1:  850:    case gardens:
        1:  851:      return -1;
        -:  852:			
    #####:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
    #####:  888:    case remodel:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:
    #####:  896:      gainCard(choice2, state, 0, currentPlayer);
        -:  897:
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
        -:  900:
        -:  901:      //discard trashed card
    #####:  902:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  903:	{
    #####:  904:	  if (state->hand[currentPlayer][i] == j)
        -:  905:	    {
    #####:  906:	      discardCard(i, currentPlayer, state, 0);			
    #####:  907:	      break;
        -:  908:	    }
        -:  909:	}
        -:  910:
        -:  911:
    #####:  912:      return 0;
        -:  913:		
        1:  914:    case smithy:
        -:  915:      
        1:  916:	  smithyRefactored(state, currentPlayer, handPos);
        -:  917:	  
        -:  918:
        -:  919:		
        2:  920:    case village:
        -:  921:      
        2:  922:	  villageRefactored(state, currentPlayer,handPos);
        -:  923:	  
        -:  924:
        -:  925:		
        2:  926:    case baron:
        2:  927:      state->numBuys++;//Increase buys by 1!
        2:  928:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  929:	int p = 0;//Iterator for hand!
    #####:  930:	int card_not_discarded = 1;//Flag for discard set!
    #####:  931:	while(card_not_discarded){
    #####:  932:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  933:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  934:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  935:	    state->discardCount[currentPlayer]++;
    #####:  936:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  937:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  938:	    }
    #####:  939:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  940:	    state->handCount[currentPlayer]--;
    #####:  941:	    card_not_discarded = 0;//Exit the loop
        -:  942:	  }
    #####:  943:	  else if (p > state->handCount[currentPlayer]){
        -:  944:	    if(DEBUG) {
        -:  945:	      printf("No estate cards in your hand, invalid choice\n");
        -:  946:	      printf("Must gain an estate if there are any\n");
        -:  947:	    }
    #####:  948:	    if (supplyCount(estate, state) > 0){
    #####:  949:	      gainCard(estate, state, 0, currentPlayer);
    #####:  950:	      state->supplyCount[estate]--;//Decrement estates
    #####:  951:	      if (supplyCount(estate, state) == 0){
    #####:  952:		isGameOver(state);
        -:  953:	      }
        -:  954:	    }
    #####:  955:	    card_not_discarded = 0;//Exit the loop
        -:  956:	  }
        -:  957:			    
        -:  958:	  else{
    #####:  959:	    p++;//Next card
        -:  960:	  }
        -:  961:	}
        -:  962:      }
        -:  963:			    
        -:  964:      else{
        2:  965:	if (supplyCount(estate, state) > 0){
        2:  966:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        2:  967:	  state->supplyCount[estate]--;//Decrement Estates
        2:  968:	  if (supplyCount(estate, state) == 0){
    #####:  969:	    isGameOver(state);
        -:  970:	  }
        -:  971:	}
        -:  972:      }
        -:  973:	    
        -:  974:      
        2:  975:      return 0;
        -:  976:		
    #####:  977:    case great_hall:
        -:  978:      //+1 Card
    #####:  979:      drawCard(currentPlayer, state);
        -:  980:			
        -:  981:      //+1 Actions
    #####:  982:      state->numActions++;
        -:  983:			
        -:  984:      //discard card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
    #####:  986:      return 0;
        -:  987:		
    #####:  988:    case minion:
        -:  989:      //+1 action
    #####:  990:      state->numActions++;
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
        -:  994:			
    #####:  995:      if (choice1)		//+2 coins
        -:  996:	{
    #####:  997:	  state->coins = state->coins + 2;
        -:  998:	}
        -:  999:			
    #####: 1000:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1001:	{
        -: 1002:	  //discard hand
    #####: 1003:	  while(numHandCards(state) > 0)
        -: 1004:	    {
    #####: 1005:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:	    }
        -: 1007:				
        -: 1008:	  //draw 4
    #####: 1009:	  for (i = 0; i < 4; i++)
        -: 1010:	    {
    #####: 1011:	      drawCard(currentPlayer, state);
        -: 1012:	    }
        -: 1013:				
        -: 1014:	  //other players discard hand and redraw if hand size > 4
    #####: 1015:	  for (i = 0; i < state->numPlayers; i++)
        -: 1016:	    {
    #####: 1017:	      if (i != currentPlayer)
        -: 1018:		{
    #####: 1019:		  if ( state->handCount[i] > 4 )
        -: 1020:		    {
        -: 1021:		      //discard hand
    #####: 1022:		      while( state->handCount[i] > 0 )
        -: 1023:			{
    #####: 1024:			  discardCard(handPos, i, state, 0);
        -: 1025:			}
        -: 1026:							
        -: 1027:		      //draw 4
    #####: 1028:		      for (j = 0; j < 4; j++)
        -: 1029:			{
    #####: 1030:			  drawCard(i, state);
        -: 1031:			}
        -: 1032:		    }
        -: 1033:		}
        -: 1034:	    }
        -: 1035:				
        -: 1036:	}
    #####: 1037:      return 0;
        -: 1038:		
        1: 1039:    case steward:
        1: 1040:      if (choice1 == 1)
        -: 1041:	{
        -: 1042:	  //+2 cards
        1: 1043:	  drawCard(currentPlayer, state);
        1: 1044:	  drawCard(currentPlayer, state);
        -: 1045:	}
    #####: 1046:      else if (choice1 == 2)
        -: 1047:	{
        -: 1048:	  //+2 coins
    #####: 1049:	  state->coins = state->coins + 2;
        -: 1050:	}
        -: 1051:      else
        -: 1052:	{
        -: 1053:	  //trash 2 cards in hand
    #####: 1054:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1055:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1056:	}
        -: 1057:			
        -: 1058:      //discard card from hand
        1: 1059:      discardCard(handPos, currentPlayer, state, 0);
        1: 1060:      return 0;
        -: 1061:		
    #####: 1062:    case tribute:
    #####: 1063:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1064:	if (state->deckCount[nextPlayer] > 0){
    #####: 1065:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	  state->deckCount[nextPlayer]--;
        -: 1067:	}
    #####: 1068:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1069:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1070:	  state->discardCount[nextPlayer]--;
        -: 1071:	}
        -: 1072:	else{
        -: 1073:	  //No Card to Reveal
        -: 1074:	  if (DEBUG){
        -: 1075:	    printf("No cards to reveal\n");
        -: 1076:	  }
        -: 1077:	}
        -: 1078:      }
        -: 1079:	    
        -: 1080:      else{
    #####: 1081:	if (state->deckCount[nextPlayer] == 0){
    #####: 1082:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1083:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1084:	    state->deckCount[nextPlayer]++;
    #####: 1085:	    state->discard[nextPlayer][i] = -1;
    #####: 1086:	    state->discardCount[nextPlayer]--;
        -: 1087:	  }
        -: 1088:			    
    #####: 1089:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1090:	} 
    #####: 1091:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1092:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1093:	state->deckCount[nextPlayer]--;
    #####: 1094:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1095:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1096:	state->deckCount[nextPlayer]--;
        -: 1097:      }    
        -: 1098:		       
    #####: 1099:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1100:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1101:	state->playedCardCount++;
    #####: 1102:	tributeRevealedCards[1] = -1;
        -: 1103:      }
        -: 1104:
    #####: 1105:      for (i = 0; i <= 2; i ++){
    #####: 1106:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1107:	  state->coins += 2;
        -: 1108:	}
        -: 1109:		    
    #####: 1110:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1111:	  drawCard(currentPlayer, state);
    #####: 1112:	  drawCard(currentPlayer, state);
        -: 1113:	}
        -: 1114:	else{//Action Card
    #####: 1115:	  state->numActions = state->numActions + 2;
        -: 1116:	}
        -: 1117:      }
        -: 1118:	    
    #####: 1119:      return 0;
        -: 1120:		
    #####: 1121:    case ambassador:
    #####: 1122:      j = 0;		//used to check if player has enough cards to discard
        -: 1123:
    #####: 1124:      if (choice2 > 2 || choice2 < 0)
        -: 1125:	{
    #####: 1126:	  return -1;				
        -: 1127:	}
        -: 1128:
    #####: 1129:      if (choice1 == handPos)
        -: 1130:	{
    #####: 1131:	  return -1;
        -: 1132:	}
        -: 1133:
    #####: 1134:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:	{
    #####: 1136:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1137:	    {
    #####: 1138:	      j++;
        -: 1139:	    }
        -: 1140:	}
    #####: 1141:      if (j < choice2)
        -: 1142:	{
    #####: 1143:	  return -1;				
        -: 1144:	}
        -: 1145:
        -: 1146:      if (DEBUG) 
        -: 1147:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1148:
        -: 1149:      //increase supply count for choosen card by amount being discarded
    #####: 1150:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1151:			
        -: 1152:      //each other player gains a copy of revealed card
    #####: 1153:      for (i = 0; i < state->numPlayers; i++)
        -: 1154:	{
    #####: 1155:	  if (i != currentPlayer)
        -: 1156:	    {
    #####: 1157:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1158:	    }
        -: 1159:	}
        -: 1160:
        -: 1161:      //discard played card from hand
    #####: 1162:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1163:
        -: 1164:      //trash copies of cards returned to supply
    #####: 1165:      for (j = 0; j < choice2; j++)
        -: 1166:	{
    #####: 1167:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1168:	    {
    #####: 1169:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1170:		{
    #####: 1171:		  discardCard(i, currentPlayer, state, 1);
    #####: 1172:		  break;
        -: 1173:		}
        -: 1174:	    }
        -: 1175:	}			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:		
    #####: 1179:    case cutpurse:
        -: 1180:
    #####: 1181:      updateCoins(currentPlayer, state, 2);
    #####: 1182:      for (i = 0; i < state->numPlayers; i++)
        -: 1183:	{
    #####: 1184:	  if (i != currentPlayer)
        -: 1185:	    {
    #####: 1186:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1187:		{
    #####: 1188:		  if (state->hand[i][j] == copper)
        -: 1189:		    {
    #####: 1190:		      discardCard(j, i, state, 0);
    #####: 1191:		      break;
        -: 1192:		    }
    #####: 1193:		  if (j == state->handCount[i])
        -: 1194:		    {
    #####: 1195:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1196:			{
        -: 1197:			  if (DEBUG)
        -: 1198:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1199:			}	
    #####: 1200:		      break;
        -: 1201:		    }		
        -: 1202:		}
        -: 1203:					
        -: 1204:	    }
        -: 1205:				
        -: 1206:	}				
        -: 1207:
        -: 1208:      //discard played card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1210:
    #####: 1211:      return 0;
        -: 1212:
        -: 1213:		
    #####: 1214:    case embargo: 
        -: 1215:      //+2 Coins
    #####: 1216:      state->coins = state->coins + 2;
        -: 1217:			
        -: 1218:      //see if selected pile is in play
    #####: 1219:      if ( state->supplyCount[choice1] == -1 )
        -: 1220:	{
    #####: 1221:	  return -1;
        -: 1222:	}
        -: 1223:			
        -: 1224:      //add embargo token to selected supply pile
    #####: 1225:      state->embargoTokens[choice1]++;
        -: 1226:			
        -: 1227:      //trash card
    #####: 1228:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1229:      return 0;
        -: 1230:		
    #####: 1231:    case outpost:
        -: 1232:      //set outpost flag
    #####: 1233:      state->outpostPlayed++;
        -: 1234:			
        -: 1235:      //discard card
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1237:      return 0;
        -: 1238:		
    #####: 1239:    case salvager:
        -: 1240:      //+1 buy
    #####: 1241:      state->numBuys++;
        -: 1242:			
    #####: 1243:      if (choice1)
        -: 1244:	{
        -: 1245:	  //gain coins equal to trashed card
    #####: 1246:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1247:	  //trash card
    #####: 1248:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1249:	}
        -: 1250:			
        -: 1251:      //discard card
    #####: 1252:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1253:      return 0;
        -: 1254:		
    #####: 1255:    case sea_hag:
    #####: 1256:      for (i = 0; i < state->numPlayers; i++){
    #####: 1257:	if (i != currentPlayer){
    #####: 1258:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1259:	  state->discardCount[i]++;
    #####: 1260:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1261:	}
        -: 1262:      }
    #####: 1263:      return 0;
        -: 1264:		
    #####: 1265:    case treasure_map:
        -: 1266:      //search hand for another treasure_map
    #####: 1267:      index = -1;
    #####: 1268:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1269:	{
    #####: 1270:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1271:	    {
    #####: 1272:	      index = i;
    #####: 1273:	      break;
        -: 1274:	    }
        -: 1275:	}
    #####: 1276:      if (index > -1)
        -: 1277:	{
        -: 1278:	  //trash both treasure cards
    #####: 1279:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1280:	  discardCard(index, currentPlayer, state, 1);
        -: 1281:
        -: 1282:	  //gain 4 Gold cards
    #####: 1283:	  for (i = 0; i < 4; i++)
        -: 1284:	    {
    #####: 1285:	      gainCard(gold, state, 1, currentPlayer);
        -: 1286:	    }
        -: 1287:				
        -: 1288:	  //return success
    #####: 1289:	  return 1;
        -: 1290:	}
        -: 1291:			
        -: 1292:      //no second treasure_map found in hand
    #####: 1293:      return -1;
        -: 1294:    }
        -: 1295:	
    #####: 1296:  return -1;
        -: 1297:}
        -: 1298:
        -: 1299:
        -: 1300:
        -: 1301:
        5: 1302:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1303:{
        -: 1304:	
        -: 1305:  //if card is not trashed, added to Played pile 
        5: 1306:  if (trashFlag < 1)
        -: 1307:    {
        -: 1308:      //add card to played pile
        5: 1309:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1310:      state->playedCardCount++;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //set played card to -1
        5: 1314:  state->hand[currentPlayer][handPos] = -1;
        -: 1315:	
        -: 1316:  //remove card from player's hand
        5: 1317:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1318:    {
        -: 1319:      //reduce number of cards in hand
    #####: 1320:      state->handCount[currentPlayer]--;
        -: 1321:    }
        5: 1322:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1323:    {
        -: 1324:      //reduce number of cards in hand
    #####: 1325:      state->handCount[currentPlayer]--;
        -: 1326:    }
        -: 1327:  else 	
        -: 1328:    {
        -: 1329:      //replace discarded card with last card in hand
        5: 1330:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1331:      //set last card to -1
        5: 1332:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1333:      //reduce number of cards in hand
        5: 1334:      state->handCount[currentPlayer]--;
        -: 1335:    }
        -: 1336:	
        5: 1337:  return 0;
        -: 1338:}
        -: 1339:
        3: 1340:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1341:{
        -: 1342:  //Note: supplyPos is enum of choosen card
        -: 1343:	
        -: 1344:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1345:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1346:    {
    #####: 1347:      return -1;
        -: 1348:    }
        -: 1349:	
        -: 1350:  //added card for [whoseTurn] current player:
        -: 1351:  // toFlag = 0 : add to discard
        -: 1352:  // toFlag = 1 : add to deck
        -: 1353:  // toFlag = 2 : add to hand
        -: 1354:
        3: 1355:  if (toFlag == 1)
        -: 1356:    {
    #####: 1357:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1358:      state->deckCount[player]++;
        -: 1359:    }
        3: 1360:  else if (toFlag == 2)
        -: 1361:    {
    #####: 1362:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1363:      state->handCount[player]++;
        -: 1364:    }
        -: 1365:  else
        -: 1366:    {
        3: 1367:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1368:      state->discardCount[player]++;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //decrease number in supply pile
        3: 1372:  state->supplyCount[supplyPos]--;
        -: 1373:	 
        3: 1374:  return 0;
        -: 1375:}
        -: 1376:
        8: 1377:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1378:{
        -: 1379:  int i;
        -: 1380:	
        -: 1381:  //reset coin count
        8: 1382:  state->coins = 0;
        -: 1383:
        -: 1384:  //add coins for each Treasure card in player's hand
       52: 1385:  for (i = 0; i < state->handCount[player]; i++)
        -: 1386:    {
       44: 1387:      if (state->hand[player][i] == copper)
        -: 1388:	{
       28: 1389:	  state->coins += 1;
        -: 1390:	}
       16: 1391:      else if (state->hand[player][i] == silver)
        -: 1392:	{
        1: 1393:	  state->coins += 2;
        -: 1394:	}
       15: 1395:      else if (state->hand[player][i] == gold)
        -: 1396:	{
        1: 1397:	  state->coins += 3;
        -: 1398:	}	
        -: 1399:    }	
        -: 1400:
        -: 1401:  //add bonus
        8: 1402:  state->coins += bonus;
        -: 1403:
        8: 1404:  return 0;
        -: 1405:}
        -: 1406:
        -: 1407:
        -: 1408://end of dominion.c
        -: 1409:
